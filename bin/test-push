#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'

require 'rest'
require 'json'
require 'cocoapods-core'

require 'safe_yaml'
SafeYAML::OPTIONS[:default_mode] = :safe

def print_response(response)
  puts "[HTTP: #{response.status_code}]"
  puts response.body
end

def register(base_url, email, name)
  print_response REST.post("#{base_url}/api/v1/register", { 'email' => email, 'name' => name }.to_yaml, 'Content-Type' => 'text/yaml')
end

def me(base_url, token)
  print_response REST.get("#{base_url}/api/v1/me", 'Content-Type' => 'text/yaml', 'Authorization' => "Token #{token}")
end

def push_spec(base_url, token, spec_path)
  spec = Pod::Specification.from_file(spec_path)
  response = REST.post("#{base_url}/api/v1/pods", spec.to_yaml, 'Content-Type' => 'text/yaml', 'Authorization' => "Token #{token}")

  if (400...600).include?(response.status_code)
    print_response(response)
    return
  end

  status_url = response.headers['location'].first
  puts "Registered resource URL: #{status_url}"

  loop do
    response = REST.get(status_url, 'Content-Type' => 'text/yaml', 'Accept' => 'text/yaml')
    print_response(response)
    break if [200, 404].include?(response.status_code)
    sleep 2
  end
end

case [ARGV.shift, ARGV.size]
when ['register', 3]
  register(*ARGV)
when ['me', 2]
  me(*ARGV)
when ['push', 3]
  push_spec(*ARGV)
else
  $stderr.puts "Usage:"
  $stderr.puts ""
  $stderr.puts "  Register: $ #{File.basename(__FILE__)} register scheme://host:port email name"
  $stderr.puts "        Me: $ #{File.basename(__FILE__)} me scheme://host:port token"
  $stderr.puts "      Push: $ #{File.basename(__FILE__)} push scheme://host:port token /path/to/file.podspec"
  exit 1
end
